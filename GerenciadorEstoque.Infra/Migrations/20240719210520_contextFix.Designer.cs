// <auto-generated />
using System;
using GerenciadorEstoque.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GerenciadorEstoque.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240719210520_contextFix")]
    partial class contextFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Loja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Lojas", (string)null);
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.ProdutoAggregate.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Descricao");

                    b.Property<int>("EstoqueMinimo")
                        .HasColumnType("int")
                        .HasColumnName("EstoqueMinimo");

                    b.Property<string>("Gtin")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("Gtin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.ProdutoEstoqueAggregate.ProdutoEstoque", b =>
                {
                    b.Property<Guid>("LojaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estoque")
                        .HasPrecision(7)
                        .HasColumnType("int")
                        .HasColumnName("Estoque");

                    b.HasKey("LojaId", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoEstoques", (string)null);
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.VendaAggregate.Venda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LojaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.VendaProdutoAggregate.VendaProduto", b =>
                {
                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "VendaId");

                    b.HasIndex("VendaId");

                    b.ToTable("VendaProdutos");
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Loja", b =>
                {
                    b.OwnsOne("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Validations.CodigoLoja", "Codigo", b1 =>
                        {
                            b1.Property<Guid>("LojaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Codigo")
                                .IsRequired()
                                .HasColumnType("varchar(4)")
                                .HasColumnName("Codigo");

                            b1.HasKey("LojaId");

                            b1.ToTable("Lojas");

                            b1.WithOwner()
                                .HasForeignKey("LojaId");
                        });

                    b.OwnsOne("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Validations.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("LojaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("varchar(9)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("EnderecoNumero")
                                .IsRequired()
                                .HasColumnType("varchar(5)")
                                .HasColumnName("EnderecoNumero");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Logradouro");

                            b1.HasKey("LojaId");

                            b1.ToTable("Lojas");

                            b1.WithOwner()
                                .HasForeignKey("LojaId");
                        });

                    b.OwnsOne("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Validations.TelefoneLoja", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("LojaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CodigoArea")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("CodigoArea");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("varchar(9)")
                                .HasColumnName("Numero");

                            b1.HasKey("LojaId");

                            b1.ToTable("Lojas");

                            b1.WithOwner()
                                .HasForeignKey("LojaId");
                        });

                    b.Navigation("Codigo")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.ProdutoAggregate.Produto", b =>
                {
                    b.OwnsOne("GerenciadorEstoque.Domain.Aggregates.ProdutoAggregate.Validations.Preco", "Preco", b1 =>
                        {
                            b1.Property<Guid>("ProdutoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Preco");

                            b1.HasKey("ProdutoId");

                            b1.ToTable("Produtos");

                            b1.WithOwner()
                                .HasForeignKey("ProdutoId");
                        });

                    b.Navigation("Preco")
                        .IsRequired();
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.ProdutoEstoqueAggregate.ProdutoEstoque", b =>
                {
                    b.HasOne("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Loja", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GerenciadorEstoque.Domain.Aggregates.ProdutoAggregate.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Loja");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.VendaAggregate.Venda", b =>
                {
                    b.HasOne("GerenciadorEstoque.Domain.Aggregates.LojaAggregate.Loja", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.VendaProdutoAggregate.VendaProduto", b =>
                {
                    b.HasOne("GerenciadorEstoque.Domain.Aggregates.ProdutoAggregate.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GerenciadorEstoque.Domain.Aggregates.VendaAggregate.Venda", null)
                        .WithMany("VendaProdutos")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GerenciadorEstoque.Domain.Aggregates.VendaAggregate.Venda", b =>
                {
                    b.Navigation("VendaProdutos");
                });
#pragma warning restore 612, 618
        }
    }
}
